{"ast":null,"code":"import jspdf from \"jspdf\";\nimport autoTable from 'jspdf-autotable';\nexport const createPDF = (data, option) => {\n  const doc = new jspdf({\n    orientation: 'p',\n    unit: 'mm',\n    format: 'letter'\n  });\n  const u = [];\n  let i = 1;\n  switch (option) {\n    case 't':\n      const addu = data.map(d => {\n        u.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`]);\n        i += 1;\n      });\n      break;\n    case 'a':\n      const adduact = data.filter(e => e.enabled === 1);\n    /*\t\tu.push([`${i}`, `${e.user}`, `${e.fullname}`, `${e.createdAt}`, `${e.updatedAt}`, 'Activo'],)\n    \t        i += 1\n    \t    }\n    \t    break\n    \t    }\n    \tcase 'i':\n    \t    const addu = data.filter((e)=>e.enabled === 0){\n    \t\tu.push([`${i}`, `${e.user}`, `${e.fullname}`, `${e.createdAt}`, `${e.updatedAt}`, 'Inactivo'],)\n    \t        i += 1\n    \t    }\n    \t    break\n    \t    }\n    \tdefault:*/\n  }\n  let b = u;\n  for (let x = 0; x <= 1; x++) {\n    for (let i = 0; i <= Object.keys(u).length - 1; i++) {\n      b = [...b, u[i]];\n    }\n  }\n  doc.setFont('courier');\n  doc.setFontSize(14);\n  doc.text(\"Usuarios del proxy\", 14, 10);\n  doc.setLineDashPattern([1, 1]);\n  doc.line(14, 13, 200, 13, 'FD');\n  doc.autoTable({\n    theme: 'plain',\n    font: 'courier',\n    head: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n    body: b\n  });\n  doc.save('usuarios.pdf');\n};\nexport default createPDF;\n\n/* NOTES:\n\n    * Table\n    Styling options\n    theme: 'striped'|'grid'|'plain' = 'striped'\n    styles: StyleDef\n    headStyles: StyleDef\n    bodyStyles: StyleDef\n    footStyles: StyleDef\n    alternateRowStyles: StyleDef\n    columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n    StyleDef:\n    \n    font: 'helvetica'|'times'|'courier' = 'helvetica'\n    fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n    overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n    fillColor: Color? = null\n    textColor: Color? = 20\n    cellWidth: 'auto'|'wrap'|number = 'auto'\n    minCellWidth: number? = 10\n    minCellHeight: number = 0\n    halign: 'left'|'center'|'right' = 'left'\n    valign: 'top'|'middle'|'bottom' = 'top'\n    fontSize: number = 10\n    cellPadding: Padding = 10\n    lineColor: Color = 10\n    lineWidth: border = 0 // If 0, no border is drawn\n    \n    * Document\n\n    line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n    rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n    roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n    triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n    setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n    setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n    setCreationDate(date)\n    setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n    setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n    addPage()\t\t\t\t\t// AddsetPage(page)\n    movePage(targetPage, beforePage) \n    setPage(page)\t\t\t\t// Sets focus to (page)\n    setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n    setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n    setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n    setDrawColor(ch1, ch2, ch3, ch4\n    \n*/","map":{"version":3,"names":["jspdf","autoTable","createPDF","data","option","doc","orientation","unit","format","u","i","addu","map","d","push","user","fullname","createdAt","updatedAt","enabled","adduact","filter","e","b","x","Object","keys","length","setFont","setFontSize","text","setLineDashPattern","line","theme","font","head","body","save"],"sources":["/data/data/com.termux/files/home/www/proxy-users/app/src/libs/usersPDF.js"],"sourcesContent":["import jspdf from \"jspdf\"\nimport autoTable from 'jspdf-autotable'\n\nexport const createPDF = (data, option) => {\n\n    const doc = new jspdf({\n\torientation: 'p',\n\tunit: 'mm',\n\tformat: 'letter'\n    })\n\n    const u = [ ]\n    let i = 1\n    \n    \n    switch(option){\n\tcase 't':\n\t    const addu = data.map(d =>{\n\t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`],)\n\t        i += 1\n\t    })\n    \t    break\n\tcase 'a':\n\t    const adduact = data.filter(e => e.enabled === 1)\n/*\t\tu.push([`${i}`, `${e.user}`, `${e.fullname}`, `${e.createdAt}`, `${e.updatedAt}`, 'Activo'],)\n\t        i += 1\n\t    }\n\t    break\n\t    }\n\tcase 'i':\n\t    const addu = data.filter((e)=>e.enabled === 0){\n\t\tu.push([`${i}`, `${e.user}`, `${e.fullname}`, `${e.createdAt}`, `${e.updatedAt}`, 'Inactivo'],)\n\t        i += 1\n\t    }\n\t    break\n\t    }\n\tdefault:*/\n    }\n\n    let b = u\n    for(let x=0; x<=1; x++){\n\tfor(let i=0; i<=Object.keys(u).length - 1; i++){\n\t    b = [...b, u[i]]   \n\t}\n    }\n\n    doc.setFont('courier')\n    doc.setFontSize(14)\n    doc.text(\"Usuarios del proxy\", 14, 10)\n    doc.setLineDashPattern([1,1])\n    doc.line(14,13,200,13,'FD')\n    \n    doc.autoTable({\n        theme: 'plain',\n        font: 'courier',\n\thead: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n\tbody: b,\n    })\n\n    doc.save('usuarios.pdf')\n\n\n}\n\nexport default createPDF\n\n/* NOTES:\n\n    * Table\n    Styling options\n    theme: 'striped'|'grid'|'plain' = 'striped'\n    styles: StyleDef\n    headStyles: StyleDef\n    bodyStyles: StyleDef\n    footStyles: StyleDef\n    alternateRowStyles: StyleDef\n    columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n    StyleDef:\n    \n    font: 'helvetica'|'times'|'courier' = 'helvetica'\n    fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n    overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n    fillColor: Color? = null\n    textColor: Color? = 20\n    cellWidth: 'auto'|'wrap'|number = 'auto'\n    minCellWidth: number? = 10\n    minCellHeight: number = 0\n    halign: 'left'|'center'|'right' = 'left'\n    valign: 'top'|'middle'|'bottom' = 'top'\n    fontSize: number = 10\n    cellPadding: Padding = 10\n    lineColor: Color = 10\n    lineWidth: border = 0 // If 0, no border is drawn\n    \n    * Document\n\n    line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n    rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n    roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n    triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n    setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n    setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n    setCreationDate(date)\n    setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n    setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n    addPage()\t\t\t\t\t// AddsetPage(page)\n    movePage(targetPage, beforePage) \n    setPage(page)\t\t\t\t// Sets focus to (page)\n    setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n    setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n    setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n    setDrawColor(ch1, ch2, ch3, ch4\n    \n*/\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,OAAO,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAEvC,MAAMC,GAAG,GAAG,IAAIL,KAAK,CAAC;IACzBM,WAAW,EAAE,GAAG;IAChBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACL,CAAC,CAAC;EAEF,MAAMC,CAAC,GAAG,EAAG;EACb,IAAIC,CAAC,GAAG,CAAC;EAGT,QAAON,MAAM;IAChB,KAAK,GAAG;MACJ,MAAMO,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACC,CAAC,IAAG;QAC7BJ,CAAC,CAACK,IAAI,CAAC,CAAC,GAAGJ,CAAC,EAAE,EAAE,GAAGG,CAAC,CAACE,IAAI,EAAE,EAAE,GAAGF,CAAC,CAACG,QAAQ,EAAE,EAAE,GAAGH,CAAC,CAACI,SAAS,EAAE,EAAE,GAAGJ,CAAC,CAACK,SAAS,EAAE,EAAE,GAAGL,CAAC,CAACM,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,UAAU,EAAE,CAAE,CAAC;QAC1HT,CAAC,IAAI,CAAC;MACV,CAAC,CAAC;MACE;IACR,KAAK,GAAG;MACJ,MAAMU,OAAO,GAAGjB,IAAI,CAACkB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,OAAO,KAAK,CAAC,CAAC;IACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EAEA,IAAII,CAAC,GAAGd,CAAC;EACT,KAAI,IAAIe,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAEA,CAAC,EAAE,EAAC;IAC1B,KAAI,IAAId,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAEe,MAAM,CAACC,IAAI,CAACjB,CAAC,CAAC,CAACkB,MAAM,GAAG,CAAC,EAAEjB,CAAC,EAAE,EAAC;MAC3Ca,CAAC,GAAG,CAAC,GAAGA,CAAC,EAAEd,CAAC,CAACC,CAAC,CAAC,CAAC;IACpB;EACG;EAEAL,GAAG,CAACuB,OAAO,CAAC,SAAS,CAAC;EACtBvB,GAAG,CAACwB,WAAW,CAAC,EAAE,CAAC;EACnBxB,GAAG,CAACyB,IAAI,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC;EACtCzB,GAAG,CAAC0B,kBAAkB,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAC7B1B,GAAG,CAAC2B,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,IAAI,CAAC;EAE3B3B,GAAG,CAACJ,SAAS,CAAC;IACVgC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,SAAS;IACtBC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;IACnFC,IAAI,EAAEb;EACH,CAAC,CAAC;EAEFlB,GAAG,CAACgC,IAAI,CAAC,cAAc,CAAC;AAG5B,CAAC;AAED,eAAenC,SAAS;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}