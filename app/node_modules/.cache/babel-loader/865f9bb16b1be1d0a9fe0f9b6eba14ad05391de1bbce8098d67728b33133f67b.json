{"ast":null,"code":"import jspdf from \"jspdf\";\nimport autoTable from 'jspdf-autotable';\nexport const createPDF = (data, option) => {\n  const doc = new jspdf({\n    orientation: 'p',\n    unit: 'mm',\n    format: 'letter'\n  });\n  const u = [];\n  let i = 1;\n  alert(data.length);\n\n  /*    switch(option){\n  \tcase 't':\n  \t    const addu = data.map(d =>{\n  \t    for(let i=0; i<=Object.keys(data).length - 1; i++){\n  \t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`],)\n  \t        i += 1\n  \t    })\n  \t    }\n      \t    break\n  \tcase 'a':\n  \t    const addu = data.filter((e)=>e.enabled === 1){\n  \t    for(let i=0; i<=Object.keys(u).length - 1; i++){\n  \t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, 'Activo'],)\n  \t        i += 1\n  \t    }\n  \t    break\n  \t    }\n  \tcase 'i':\n  \t    const addu = data.filter((e)=>e.enabled === 0){\n  \t    for(let i=0; i<=Object.keys(data).length - 1; i++){\n  \t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, 'Inactivo'],)\n  \t        i += 1\n  \t    }\n  \t    break\n  \t    }\n  \tdefault:\n      }\n  \n      let b = u\n      for(let x=0; x<=1; x++){\n  \tb = [...b, u[i]]   \n      }\n  \n      doc.setFont('courier')\n      doc.setFontSize(14)\n      doc.text(\"Usuarios del proxy\", 14, 10)\n      doc.setLineDashPattern([1,1])\n      doc.line(14,13,200,13,'FD')\n      \n      doc.autoTable({\n          theme: 'plain',\n          font: 'courier',\n  \thead: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n  \tbody: b,\n      })\n  \n      const fonts = JSON.stringify(doc.getFontList())    \n      doc.save('usuarios.pdf')\n  */\n};\nexport default createPDF;\n\n/* NOTES:\n\n    * Table\n    Styling options\n    theme: 'striped'|'grid'|'plain' = 'striped'\n    styles: StyleDef\n    headStyles: StyleDef\n    bodyStyles: StyleDef\n    footStyles: StyleDef\n    alternateRowStyles: StyleDef\n    columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n    StyleDef:\n    \n    font: 'helvetica'|'times'|'courier' = 'helvetica'\n    fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n    overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n    fillColor: Color? = null\n    textColor: Color? = 20\n    cellWidth: 'auto'|'wrap'|number = 'auto'\n    minCellWidth: number? = 10\n    minCellHeight: number = 0\n    halign: 'left'|'center'|'right' = 'left'\n    valign: 'top'|'middle'|'bottom' = 'top'\n    fontSize: number = 10\n    cellPadding: Padding = 10\n    lineColor: Color = 10\n    lineWidth: border = 0 // If 0, no border is drawn\n    \n    * Document\n\n    line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n    rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n    roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n    triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n    setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n    setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n    setCreationDate(date)\n    setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n    setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n    addPage()\t\t\t\t\t// AddsetPage(page)\n    movePage(targetPage, beforePage) \n    setPage(page)\t\t\t\t// Sets focus to (page)\n    setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n    setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n    setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n    setDrawColor(ch1, ch2, ch3, ch4\n    \n*/","map":{"version":3,"names":["jspdf","autoTable","createPDF","data","option","doc","orientation","unit","format","u","i","alert","length"],"sources":["/data/data/com.termux/files/home/www/proxy-users/app/src/libs/usersPDF.js"],"sourcesContent":["import jspdf from \"jspdf\"\nimport autoTable from 'jspdf-autotable'\n\nexport const createPDF = (data, option) => {\n\n    const doc = new jspdf({\n\torientation: 'p',\n\tunit: 'mm',\n\tformat: 'letter'\n    })\n\n    const u = [ ]\n    let i = 1\n    \n    alert(data.length)\n    \n/*    switch(option){\n\tcase 't':\n\t    const addu = data.map(d =>{\n\t    for(let i=0; i<=Object.keys(data).length - 1; i++){\n\t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`],)\n\t        i += 1\n\t    })\n\t    }\n    \t    break\n\tcase 'a':\n\t    const addu = data.filter((e)=>e.enabled === 1){\n\t    for(let i=0; i<=Object.keys(u).length - 1; i++){\n\t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, 'Activo'],)\n\t        i += 1\n\t    }\n\t    break\n\t    }\n\tcase 'i':\n\t    const addu = data.filter((e)=>e.enabled === 0){\n\t    for(let i=0; i<=Object.keys(data).length - 1; i++){\n\t\tu.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, 'Inactivo'],)\n\t        i += 1\n\t    }\n\t    break\n\t    }\n\tdefault:\n    }\n\n    let b = u\n    for(let x=0; x<=1; x++){\n\tb = [...b, u[i]]   \n    }\n\n    doc.setFont('courier')\n    doc.setFontSize(14)\n    doc.text(\"Usuarios del proxy\", 14, 10)\n    doc.setLineDashPattern([1,1])\n    doc.line(14,13,200,13,'FD')\n    \n    doc.autoTable({\n        theme: 'plain',\n        font: 'courier',\n\thead: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n\tbody: b,\n    })\n\n    const fonts = JSON.stringify(doc.getFontList())    \n    doc.save('usuarios.pdf')\n*/\n\n}\n\nexport default createPDF\n\n/* NOTES:\n\n    * Table\n    Styling options\n    theme: 'striped'|'grid'|'plain' = 'striped'\n    styles: StyleDef\n    headStyles: StyleDef\n    bodyStyles: StyleDef\n    footStyles: StyleDef\n    alternateRowStyles: StyleDef\n    columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n    StyleDef:\n    \n    font: 'helvetica'|'times'|'courier' = 'helvetica'\n    fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n    overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n    fillColor: Color? = null\n    textColor: Color? = 20\n    cellWidth: 'auto'|'wrap'|number = 'auto'\n    minCellWidth: number? = 10\n    minCellHeight: number = 0\n    halign: 'left'|'center'|'right' = 'left'\n    valign: 'top'|'middle'|'bottom' = 'top'\n    fontSize: number = 10\n    cellPadding: Padding = 10\n    lineColor: Color = 10\n    lineWidth: border = 0 // If 0, no border is drawn\n    \n    * Document\n\n    line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n    rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n    roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n    triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n    setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n    setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n    setCreationDate(date)\n    setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n    setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n    addPage()\t\t\t\t\t// AddsetPage(page)\n    movePage(targetPage, beforePage) \n    setPage(page)\t\t\t\t// Sets focus to (page)\n    setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n    setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n    setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n    setDrawColor(ch1, ch2, ch3, ch4\n    \n*/\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,OAAO,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAEvC,MAAMC,GAAG,GAAG,IAAIL,KAAK,CAAC;IACzBM,WAAW,EAAE,GAAG;IAChBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACL,CAAC,CAAC;EAEF,MAAMC,CAAC,GAAG,EAAG;EACb,IAAIC,CAAC,GAAG,CAAC;EAETC,KAAK,CAACR,IAAI,CAACS,MAAM,CAAC;;EAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AAED,eAAeV,SAAS;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}