{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport serverContext from '../App.js';\nexport const useVerify = () => {\n  _s();\n  const [id, setId] = useState('');\n  const [actUser, setActUser] = useState('');\n  const [actFullname, setActFullName] = useState('');\n  const [admin, setAdmin] = useState(true);\n  const server = useContext(serverContext);\n  const navigate = useNavigate();\n  const verify = async () => {\n    try {\n      const res = await axios.get(`${server}`);\n      if (res.data.verified === true) {\n        if (res.data.user !== 'admin') {\n          setAdmin(false);\n        }\n        setId(res.data.id);\n        setActUser(res.data.user);\n        setActFullName(res.data.fullname);\n      } else {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => verify, []);\n  return {\n    id,\n    actUser,\n    actFullname,\n    admin\n  };\n};\n_s(useVerify, \"+XEILjYw7pIpRkjSVT2XZ/BwZ6I=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["axios","useState","useEffect","useContext","useNavigate","serverContext","useVerify","_s","id","setId","actUser","setActUser","actFullname","setActFullName","admin","setAdmin","server","navigate","verify","res","get","data","verified","user","fullname","error","console","log"],"sources":["/data/data/com.termux/files/home/www/proxy-users-mongodb/app/src/hooks/useVerify.js"],"sourcesContent":["import axios from 'axios'\nimport { useState, useEffect, useContext } from 'react'\nimport { useNavigate} from 'react-router-dom'\nimport serverContext from '../App.js'\n\nexport const useVerify = () => {\n\tconst [id, setId] = useState('')\n\tconst [actUser, setActUser] = useState('')\n\tconst [actFullname, setActFullName] = useState('')\n\tconst [admin, setAdmin] = useState(true)\n\n\tconst server = useContext(serverContext)\n\tconst navigate = useNavigate()\n\t\n\n\t\tconst verify = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(`${server}`)\n\t\t\tif (res.data.verified === true) {\n\t\t    \tif (res.data.user !== 'admin') {\n\t\t            setAdmin(false)\n\t\t    \t}\n\t\t        setId(res.data.id)\n\t\t        setActUser(res.data.user)\n\t\t        setActFullName(res.data.fullname)\n\t\t        \t        \t\n\t\t    } else {\n\t\t    \tnavigate('/login')\n\t\t    }\n\t\t } catch (error) {\n\t\t \tconsole.log(error)\n\t\t }\n\t\t}\n\tuseEffect(() => verify, [])\n\n\treturn { id, actUser, actFullname, admin }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAO,kBAAkB;AAC7C,OAAOC,aAAa,MAAM,WAAW;AAErC,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,MAAM,GAAGb,UAAU,CAACE,aAAa,CAAC;EACxC,MAAMY,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAG7B,MAAMc,MAAM,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACH,MAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,GAAGJ,MAAM,EAAE,CAAC;MACxC,IAAIG,GAAG,CAACE,IAAI,CAACC,QAAQ,KAAK,IAAI,EAAE;QAC5B,IAAIH,GAAG,CAACE,IAAI,CAACE,IAAI,KAAK,OAAO,EAAE;UACxBR,QAAQ,CAAC,KAAK,CAAC;QACtB;QACGN,KAAK,CAACU,GAAG,CAACE,IAAI,CAACb,EAAE,CAAC;QAClBG,UAAU,CAACQ,GAAG,CAACE,IAAI,CAACE,IAAI,CAAC;QACzBV,cAAc,CAACM,GAAG,CAACE,IAAI,CAACG,QAAQ,CAAC;MAErC,CAAC,MAAM;QACNP,QAAQ,CAAC,QAAQ,CAAC;MACnB;IACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACnB;EACD,CAAC;EACFvB,SAAS,CAAC,MAAMgB,MAAM,EAAE,EAAE,CAAC;EAE3B,OAAO;IAAEV,EAAE;IAAEE,OAAO;IAAEE,WAAW;IAAEE;EAAM,CAAC;AAC3C,CAAC;AAAAP,EAAA,CA/BYD,SAAS;EAAA,QAOJF,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}