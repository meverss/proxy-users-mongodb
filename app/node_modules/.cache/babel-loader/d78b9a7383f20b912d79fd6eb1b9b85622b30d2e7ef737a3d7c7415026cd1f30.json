{"ast":null,"code":"import jspdf from \"jspdf\";\nimport autoTable from 'jspdf-autotable';\nexport const createPDF = (data, option) => {\n  const doc = new jspdf({\n    orientation: 'p',\n    unit: 'mm',\n    format: 'letter'\n  });\n  const myFont = '../fonts/solitreo.ttf';\n  const u = [];\n  let i = 1;\n  const addu = data.map(d => {\n    u.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`]);\n    i += 1;\n  });\n  let b = u;\n  switch (option) {\n    case 'todos' || 't':\n      break;\n    case 'activo' || 'a':\n      break;\n    case 'activo' || 'a':\n      break;\n    default:\n  }\n  for (let x = 0; x <= 1; x++) {\n    for (let i = 0; i <= Object.keys(u).length - 1; i++) {\n      b = [...b, u[i]];\n    }\n  }\n  doc.setFont('courier');\n  doc.setFontSize(14);\n  doc.text(\"Usuarios del proxy\", 14, 10);\n  doc.setLineDashPattern([1, 1]);\n  doc.line(14, 13, 200, 13, 'FD');\n  doc.autoTable({\n    theme: 'plain',\n    font: 'courier',\n    head: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n    body: b\n  });\n  const fonts = JSON.stringify(doc.getFontList());\n  doc.save('usuarios.pdf');\n\n  /* NOTES:\n  \n      * Table\n      Styling options\n      theme: 'striped'|'grid'|'plain' = 'striped'\n      styles: StyleDef\n      headStyles: StyleDef\n      bodyStyles: StyleDef\n      footStyles: StyleDef\n      alternateRowStyles: StyleDef\n      columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n      StyleDef:\n      \n      font: 'helvetica'|'times'|'courier' = 'helvetica'\n      fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n      overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n      fillColor: Color? = null\n      textColor: Color? = 20\n      cellWidth: 'auto'|'wrap'|number = 'auto'\n      minCellWidth: number? = 10\n      minCellHeight: number = 0\n      halign: 'left'|'center'|'right' = 'left'\n      valign: 'top'|'middle'|'bottom' = 'top'\n      fontSize: number = 10\n      cellPadding: Padding = 10\n      lineColor: Color = 10\n      lineWidth: border = 0 // If 0, no border is drawn\n      \n      * Document\n  \n      line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n      rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n      roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n      triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n      setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n      setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n      setCreationDate(date)\n      setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n      setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n      addPage()\t\t\t\t\t// AddsetPage(page)\n      movePage(targetPage, beforePage) \n      setPage(page)\t\t\t\t// Sets focus to (page)\n      setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n      setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n      setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n      setDrawColor(ch1, ch2, ch3, ch4\n      \n  */\n};\nexport default createPDF;","map":{"version":3,"names":["jspdf","autoTable","createPDF","data","option","doc","orientation","unit","format","myFont","u","i","addu","map","d","push","user","fullname","createdAt","updatedAt","enabled","b","x","Object","keys","length","setFont","setFontSize","text","setLineDashPattern","line","theme","font","head","body","fonts","JSON","stringify","getFontList","save"],"sources":["/data/data/com.termux/files/home/www/proxy-users/app/src/libs/usersPDF.js"],"sourcesContent":["import jspdf from \"jspdf\"\nimport autoTable from 'jspdf-autotable'\n\nexport const createPDF = (data, option) => {\n\n    const doc = new jspdf({\n\torientation: 'p',\n\tunit: 'mm',\n\tformat: 'letter'\n    })\n    const myFont = '../fonts/solitreo.ttf'\n\n    const u = [ ]\n    let i = 1\n\n    const addu = data.map(d =>{\n    u.push([`${i}`, `${d.user}`, `${d.fullname}`, `${d.createdAt}`, `${d.updatedAt}`, `${d.enabled === 1 ? 'Activo' : 'Inactivo'}`],)\n        i += 1\n    })\n\n    let b = u\n    \n    switch(option){\n\t\n\tcase ('todos' || 't'):\n\t\n\tbreak\n\tcase ('activo' || 'a'):\n\t\n\tbreak\n\n\tcase ('activo' || 'a'):\n\t\n\tbreak\n\tdefault:\n    }\n    \n    for(let x=0; x<=1; x++){\n\tfor(let i=0; i<=Object.keys(u).length - 1; i++){\n\t    b = [...b, u[i]]   \n\t}\n    }\n\n    doc.setFont('courier')\n    doc.setFontSize(14)\n    doc.text(\"Usuarios del proxy\", 14, 10)\n    doc.setLineDashPattern([1,1])\n    doc.line(14,13,200,13,'FD')\n    \n    doc.autoTable({\n        theme: 'plain',\n        font: 'courier',\n\thead: [['No.', 'Usuario', 'Nombre y apellidos', 'Creado', 'Actualizado', 'Estado']],\n\tbody: b,\n    })\n\n    const fonts = JSON.stringify(doc.getFontList())    \n    doc.save('usuarios.pdf')\n\n\n/* NOTES:\n\n    * Table\n    Styling options\n    theme: 'striped'|'grid'|'plain' = 'striped'\n    styles: StyleDef\n    headStyles: StyleDef\n    bodyStyles: StyleDef\n    footStyles: StyleDef\n    alternateRowStyles: StyleDef\n    columnStyles: {&columnDataKey: StyleDef} Note that the columnDataKey is normally the index of the column, but could also be the dataKey of a column if content initialized with the columns property\n    StyleDef:\n    \n    font: 'helvetica'|'times'|'courier' = 'helvetica'\n    fontStyle: 'normal'|'bold'|'italic'|'bolditalic' = 'normal'\n    overflow: 'linebreak'|'ellipsize'|'visible'|'hidden' = 'linebreak'\n    fillColor: Color? = null\n    textColor: Color? = 20\n    cellWidth: 'auto'|'wrap'|number = 'auto'\n    minCellWidth: number? = 10\n    minCellHeight: number = 0\n    halign: 'left'|'center'|'right' = 'left'\n    valign: 'top'|'middle'|'bottom' = 'top'\n    fontSize: number = 10\n    cellPadding: Padding = 10\n    lineColor: Color = 10\n    lineWidth: border = 0 // If 0, no border is drawn\n    \n    * Document\n\n    line(x1,y1,x2,y2, style)\t\t\t\t// Draw a line. Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke. \n    rect(x, y, w, h, style) \t\t\t// Add a rectangle at x,y position (style: Valid styles include: 'S' [default] - stroke, 'F' - fill, and 'DF' (or 'FD') - fill then stroke.)\n    roundedRect(x, y, w, h, rx, ry, style)\t// Add a rounded rectangle at x,y. Rounded values at rx, ry\n    triangle(x1, y1, x2, y2, x3, y3, style)\t// Adds a triangle to PDF.\n    setTextColor(ch1, ch2, ch3, ch4)\t\t// Sets the text color for upcoming elements in CMYK format\n    setCharSpace(charSpace)\t\t\t// Set global value of CharSpace.\n    setCreationDate(date)\n    setFontSize(size)\t\t\t\t// Sets font size for upcoming text elements\n    setFontStyle(style)\t\t\t\t// Switches font style or variant for upcoming text elements, while keeping the font face or family same\n    addPage()\t\t\t\t\t// AddsetPage(page)\n    movePage(targetPage, beforePage) \n    setPage(page)\t\t\t\t// Sets focus to (page)\n    setLineWidth(width) \t\t\t// Sets line width for upcoming lines.\n    setLineHeightFactor(value)\t\t\t// Sets the LineHeightFactor of proportion. Default: 1.15.\n    setFillColor(ch1, ch2, ch3, ch4)\t\t// Sets the fill color for upcoming elements. Depending on the number of arguments given, Gray, RGB, or CMYK color space is implied.\n    setDrawColor(ch1, ch2, ch3, ch4\n    \n*/\n}\n\nexport default createPDF"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,OAAO,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAEvC,MAAMC,GAAG,GAAG,IAAIL,KAAK,CAAC;IACzBM,WAAW,EAAE,GAAG;IAChBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACL,CAAC,CAAC;EACF,MAAMC,MAAM,GAAG,uBAAuB;EAEtC,MAAMC,CAAC,GAAG,EAAG;EACb,IAAIC,CAAC,GAAG,CAAC;EAET,MAAMC,IAAI,GAAGT,IAAI,CAACU,GAAG,CAACC,CAAC,IAAG;IAC1BJ,CAAC,CAACK,IAAI,CAAC,CAAC,GAAGJ,CAAC,EAAE,EAAE,GAAGG,CAAC,CAACE,IAAI,EAAE,EAAE,GAAGF,CAAC,CAACG,QAAQ,EAAE,EAAE,GAAGH,CAAC,CAACI,SAAS,EAAE,EAAE,GAAGJ,CAAC,CAACK,SAAS,EAAE,EAAE,GAAGL,CAAC,CAACM,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,UAAU,EAAE,CAAE,CAAC;IAC7HT,CAAC,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,IAAIU,CAAC,GAAGX,CAAC;EAET,QAAON,MAAM;IAEhB,KAAM,OAAO,IAAI,GAAG;MAEpB;IACA,KAAM,QAAQ,IAAI,GAAG;MAErB;IAEA,KAAM,QAAQ,IAAI,GAAG;MAErB;IACA;EACG;EAEA,KAAI,IAAIkB,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAEA,CAAC,EAAE,EAAC;IAC1B,KAAI,IAAIX,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAEY,MAAM,CAACC,IAAI,CAACd,CAAC,CAAC,CAACe,MAAM,GAAG,CAAC,EAAEd,CAAC,EAAE,EAAC;MAC3CU,CAAC,GAAG,CAAC,GAAGA,CAAC,EAAEX,CAAC,CAACC,CAAC,CAAC,CAAC;IACpB;EACG;EAEAN,GAAG,CAACqB,OAAO,CAAC,SAAS,CAAC;EACtBrB,GAAG,CAACsB,WAAW,CAAC,EAAE,CAAC;EACnBtB,GAAG,CAACuB,IAAI,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC;EACtCvB,GAAG,CAACwB,kBAAkB,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAC7BxB,GAAG,CAACyB,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,IAAI,CAAC;EAE3BzB,GAAG,CAACJ,SAAS,CAAC;IACV8B,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,SAAS;IACtBC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;IACnFC,IAAI,EAAEb;EACH,CAAC,CAAC;EAEF,MAAMc,KAAK,GAAGC,IAAI,CAACC,SAAS,CAAChC,GAAG,CAACiC,WAAW,CAAC,CAAC,CAAC;EAC/CjC,GAAG,CAACkC,IAAI,CAAC,cAAc,CAAC;;EAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,eAAerC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}