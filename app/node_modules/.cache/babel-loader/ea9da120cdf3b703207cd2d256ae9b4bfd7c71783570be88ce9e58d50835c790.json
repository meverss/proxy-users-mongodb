{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport serverContext from '../App.js';\nconst navigate = useNavigate();\nexport const useVerify = async () => {\n  _s();\n  const [id, setId] = useState();\n  const [user, setUser] = useState();\n  const [fullname, setFullName] = useState();\n  const [admin, setAdmin] = useState(true);\n  const server = useContext(serverContext);\n  try {\n    const res = await axios.get(`${server}`);\n    if (res.data.verified === true) {\n      if (res.data.user !== 'admin') {\n        setAdmin(false);\n      }\n      setId(res.data.id);\n      setUser(res.data.user);\n      setFullName(res.data.fullname);\n      return {\n        actId: id,\n        actUser: user,\n        actFullname: fullname,\n        admin\n      };\n    } else {\n      navigate('/login');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n_s(useVerify, \"oGVpdw+FykFbb+AK7fif8M6CiBg=\");","map":{"version":3,"names":["axios","useState","useContext","useNavigate","serverContext","navigate","useVerify","_s","id","setId","user","setUser","fullname","setFullName","admin","setAdmin","server","res","get","data","verified","actId","actUser","actFullname","error","console","log"],"sources":["/data/data/com.termux/files/home/www/proxy-users-mongodb/app/src/hooks/useVerify.js"],"sourcesContent":["import axios from 'axios'\nimport { useState, useContext } from 'react'\nimport { useNavigate} from 'react-router-dom'\nimport serverContext from '../App.js'\n\nconst navigate = useNavigate()\n\nexport const useVerify = async () => {\n\tconst [id, setId] = useState()\n\tconst [user, setUser] = useState()\n\tconst [fullname, setFullName] = useState()\n\tconst [admin, setAdmin] = useState(true)\n\n\tconst server = useContext(serverContext)\n\n\ttry {\n\t\tconst res = await axios.get(`${server}`)\n\t\tif (res.data.verified === true) {\n\t    \tif (res.data.user !== 'admin') {\n\t            setAdmin(false)\n\t    \t}\n\t        setId(res.data.id)\n\t        setUser(res.data.user)\n\t        setFullName(res.data.fullname)\n\n\t        return {\n\t        \tactId: id,\n\t        \tactUser: user,\n\t        \tactFullname: fullname,\n\t        \tadmin\n\t        \t} \n\t        \t\n\t    } else {\n\t    \tnavigate('/login')\n\t    }\n\t } catch (error) {\n\t \tconsole.log(error)\n\t }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,WAAW,QAAO,kBAAkB;AAC7C,OAAOC,aAAa,MAAM,WAAW;AAErC,MAAMC,QAAQ,GAAGF,WAAW,CAAC,CAAC;AAE9B,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EACpC,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC9B,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAC1C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,MAAM,GAAGd,UAAU,CAACE,aAAa,CAAC;EAExC,IAAI;IACH,MAAMa,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGF,MAAM,EAAE,CAAC;IACxC,IAAIC,GAAG,CAACE,IAAI,CAACC,QAAQ,KAAK,IAAI,EAAE;MAC5B,IAAIH,GAAG,CAACE,IAAI,CAACT,IAAI,KAAK,OAAO,EAAE;QACxBK,QAAQ,CAAC,KAAK,CAAC;MACtB;MACGN,KAAK,CAACQ,GAAG,CAACE,IAAI,CAACX,EAAE,CAAC;MAClBG,OAAO,CAACM,GAAG,CAACE,IAAI,CAACT,IAAI,CAAC;MACtBG,WAAW,CAACI,GAAG,CAACE,IAAI,CAACP,QAAQ,CAAC;MAE9B,OAAO;QACNS,KAAK,EAAEb,EAAE;QACTc,OAAO,EAAEZ,IAAI;QACba,WAAW,EAAEX,QAAQ;QACrBE;MACA,CAAC;IAEN,CAAC,MAAM;MACNT,QAAQ,CAAC,QAAQ,CAAC;IACnB;EACH,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACfC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACnB;AACF,CAAC;AAAAjB,EAAA,CA/BYD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}